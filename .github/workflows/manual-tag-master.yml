name: Create Tag in Unified Tagging Repositories

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create (e.g. 25.3.0)'
        required: true
        type: string
      dry_run:
        description: 'Simulate the tag creation without making changes'
        required: false
        default: true
        type: boolean

jobs:
  create-tag:
    runs-on: ubuntu-latest
    env:
      # Replace with your organization name.
      ORG_NAME: "BrandEmbassy"
      # Use the provided GitHub token. If needed, replace with a PAT that has the required permissions.
      GITHUB_TOKEN: ${{ secrets.AUTO_TAG_TOKEN }}
      TAG_NAME: ${{ github.event.inputs.tag }}
      DRY_RUN: ${{ github.event.inputs.dry_run }}
    steps:
      - name: Process repositories and create tag if unified tagging is enabled
        run: |
          #!/bin/bash
          set -euo pipefail

          # Pagination variables
          page=1
          per_page=100

          echo "Processing organization: $ORG_NAME"

          while :; do
            echo "Fetching page $page..."
            repos=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/orgs/$ORG_NAME/repos?per_page=$per_page&page=$page")
            repo_count=$(echo "$repos" | jq 'length')
            if [ "$repo_count" -eq 0 ]; then
              echo "No more repositories found."
              break
            fi

            echo "$repos" | jq -c '.[]' | while read -r repo; do
              repo_name=$(echo "$repo" | jq -r '.name')
              echo "---------------------------------------------------"
              echo "Checking repository: $repo_name"

              # Retrieve custom properties for the repository.
              properties=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$ORG_NAME/$repo_name/properties/values")
              is_unified=$(echo "$properties" | jq -r '.[] | select(.property_name=="is-unified-tagging-enabled") | .value')

              if [ "$is_unified" == "true" ]; then
                echo "Unified tagging is enabled for $repo_name."

                # Get repository details to determine the default branch.
                repo_details=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$ORG_NAME/$repo_name")
                default_branch=$(echo "$repo_details" | jq -r '.default_branch')
          
                # Get the latest commit SHA from the default branch.
                commit_sha=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/$ORG_NAME/$repo_name/commits/$default_branch" | jq -r '.sha')
          
                if [ "$DRY_RUN" = "true" ]; then
                  echo "DRY RUN: Repository: $repo_name"
                  echo "DRY RUN: Default Branch: $default_branch"
                  echo "DRY RUN: Latest Commit SHA: $commit_sha"
                  echo "DRY RUN: Would create tag '$TAG_NAME' pointing to commit $commit_sha."
                  # Skip actual creation in dry-run mode.
                  continue
                fi

                echo "Creating tag '$TAG_NAME' in repository $repo_name..."

                # Create the annotated tag object.
                tag_data=$(jq -n --arg tag "$TAG_NAME" \
                              --arg msg "Creating tag $TAG_NAME via GitHub Action" \
                              --arg object "$commit_sha" \
                              '{tag: $tag, message: $msg, object: $object, type: "commit"}')
                tag_obj_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/json" \
                  -X POST \
                  -d "$tag_data" \
                  "https://api.github.com/repos/$ORG_NAME/$repo_name/git/tags")
                tag_sha=$(echo "$tag_obj_response" | jq -r '.sha')

                if [ "$tag_sha" = "null" ]; then
                  echo "Failed to create tag object for $repo_name. Response: $tag_obj_response"
                  continue
                fi

                # Create the tag reference pointing to the tag object.
                ref_data=$(jq -n --arg tag "$TAG_NAME" --arg sha "$tag_sha" \
                  '{ref: ("refs/tags/" + $tag), sha: $sha}')
                ref_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                  -H "Content-Type: application/json" \
                  -X POST \
                  -d "$ref_data" \
                  "https://api.github.com/repos/$ORG_NAME/$repo_name/git/refs")
          
                if echo "$ref_response" | grep -q '"ref":'; then
                  echo "Tag '$TAG_NAME' successfully created in $repo_name."
                else
                  echo "Failed to create tag ref for $repo_name. Response: $ref_response"
                fi
              else
                echo "Skipping $repo_name (unified tagging not enabled)."
              fi
            done

            page=$((page+1))
          done
        shell: bash
